"use strict";(self.webpackChunkevent_bus_docs=self.webpackChunkevent_bus_docs||[]).push([[768],{6501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>v,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/event-bus-service","title":"EventBusService","description":"The EventBusService is the central class of the Event Bus Library. It manages event subscriptions, event emission, and strategy selection.","source":"@site/docs/api/event-bus-service.md","sourceDirName":"api","slug":"/api/event-bus-service","permalink":"/EDA-event-bus/docs/api/event-bus-service","draft":false,"unlisted":false,"editUrl":"https://github.com/adiyy2001/EDA-event-bus/tree/main/projects/event-bus-docs/docs/api/event-bus-service.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/EDA-event-bus/docs/core-concepts"},"next":{"title":"Strategies Overview","permalink":"/EDA-event-bus/docs/api/strategies/overview"}}');var i=t(4848),r=t(8453);const a={sidebar_position:1},o="EventBusService",l={},c=[{value:"API Reference",id:"api-reference",level:2},{value:"Methods",id:"methods",level:3},{value:"emit&lt;T&gt;(event: BaseEvent&lt;T&gt;): void",id:"emittevent-baseeventt-void",level:4},{value:"on&lt;T&gt;(eventName: string, filterFn?: (event: BaseEvent&lt;T&gt;) =&gt; boolean): Observable&lt;BaseEvent&lt;T&gt;&gt;",id:"onteventname-string-filterfn-event-baseeventt--boolean-observablebaseeventt",level:4},{value:"once&lt;T&gt;(eventName: string): Observable&lt;BaseEvent&lt;T&gt;&gt;",id:"onceteventname-string-observablebaseeventt",level:4},{value:"off(eventName: string, subscription: Subscription): void",id:"offeventname-string-subscription-subscription-void",level:4},{value:"offAll(eventName: string): void",id:"offalleventname-string-void",level:4},{value:"setStrategy(strategyType: StrategyType): void",id:"setstrategystrategytype-strategytype-void",level:4},{value:"setPriorityMode(enabled: boolean): void",id:"setprioritymodeenabled-boolean-void",level:4},{value:"setBatchSize(size: number): void",id:"setbatchsizesize-number-void",level:4},{value:"drainQueue(): void",id:"drainqueue-void",level:4},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Event Communication",id:"basic-event-communication",level:3},{value:"Using Filters",id:"using-filters",level:3},{value:"One-time Events",id:"one-time-events",level:3},{value:"Changing Strategies Dynamically",id:"changing-strategies-dynamically",level:3},{value:"Working with Priority",id:"working-with-priority",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"eventbusservice",children:"EventBusService"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EventBusService"})," is the central class of the Event Bus Library. It manages event subscriptions, event emission, and strategy selection."]}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"emittevent-baseeventt-void",children:"emit<T>(event: BaseEvent<T>): void"}),"\n",(0,i.jsx)(n.p,{children:"Emits an event to all subscribers based on the current strategy."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event: BaseEvent<T>"})," - The event to emit"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.emit<string>({\n  name: 'message:sent',\n  timestamp: Date.now(),\n  payload: 'Hello World',\n  category: EventCategory.USER\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"onteventname-string-filterfn-event-baseeventt--boolean-observablebaseeventt",children:"on<T>(eventName: string, filterFn?: (event: BaseEvent<T>) => boolean): Observable<BaseEvent<T>>"}),"\n",(0,i.jsx)(n.p,{children:"Subscribes to a specific event type."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName: string"})," - The name of the event to subscribe to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filterFn?: (event: BaseEvent<T>) => boolean"})," - Optional filter function"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Observable<BaseEvent<T>>"})," - An observable that emits events of the specified type"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const subscription = eventBus.on<string>('message:sent').subscribe(\n  event => console.log('Received:', event.payload)\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"onceteventname-string-observablebaseeventt",children:"once<T>(eventName: string): Observable<BaseEvent<T>>"}),"\n",(0,i.jsx)(n.p,{children:"Subscribes to an event type and automatically unsubscribes after receiving the first event."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName: string"})," - The name of the event to subscribe to"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Observable<BaseEvent<T>>"})," - An observable that emits only the first event of the specified type"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.once<string>('app:initialized').subscribe(\n  event => console.log('App initialized with config:', event.payload)\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"offeventname-string-subscription-subscription-void",children:"off(eventName: string, subscription: Subscription): void"}),"\n",(0,i.jsx)(n.p,{children:"Unsubscribes from a specific event type."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName: string"})," - The name of the event to unsubscribe from"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"subscription: Subscription"})," - The subscription to remove"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const subscription = eventBus.on('user:action').subscribe(/* ... */);\n// Later:\neventBus.off('user:action', subscription);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"offalleventname-string-void",children:"offAll(eventName: string): void"}),"\n",(0,i.jsx)(n.p,{children:"Unsubscribes all listeners from a specific event type."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName: string"})," - The name of the event to unsubscribe all listeners from"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.offAll('notifications');\n"})}),"\n",(0,i.jsx)(n.h4,{id:"setstrategystrategytype-strategytype-void",children:"setStrategy(strategyType: StrategyType): void"}),"\n",(0,i.jsx)(n.p,{children:"Changes the current event bus strategy."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"strategyType: StrategyType"})," - The strategy to use for event handling"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.setStrategy(StrategyType.DEBOUNCE);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"setprioritymodeenabled-boolean-void",children:"setPriorityMode(enabled: boolean): void"}),"\n",(0,i.jsx)(n.p,{children:"Enables or disables priority-based event processing."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled: boolean"})," - Whether to enable priority mode"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.setPriorityMode(true);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"setbatchsizesize-number-void",children:"setBatchSize(size: number): void"}),"\n",(0,i.jsx)(n.p,{children:"Sets the batch size for event processing."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"size: number"})," - The number of events to process in each batch"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.setBatchSize(5);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"drainqueue-void",children:"drainQueue(): void"}),"\n",(0,i.jsx)(n.p,{children:"Processes all pending events in the queue."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"eventBus.drainQueue();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"basic-event-communication",children:"Basic Event Communication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Component A\nexport class SenderComponent {\n  constructor(private eventBus: EventBusService) {}\n  \n  sendNotification() {\n    this.eventBus.emit<string>({\n      name: 'notification',\n      timestamp: Date.now(),\n      payload: 'New notification message',\n      category: EventCategory.USER\n    });\n  }\n}\n\n// Component B\nexport class ReceiverComponent implements OnInit, OnDestroy {\n  private subscription: Subscription;\n  \n  constructor(private eventBus: EventBusService) {}\n  \n  ngOnInit() {\n    this.subscription = this.eventBus.on<string>('notification')\n      .subscribe(event => {\n        console.log('Received notification:', event.payload);\n      });\n  }\n  \n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-filters",children:"Using Filters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Only process events with specific payload criteria\nthis.eventBus.on<User>('user:updated', \n  event => event.payload.role === 'admin')\n  .subscribe(event => {\n    console.log('Admin user updated:', event.payload);\n  });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"one-time-events",children:"One-time Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Listen for application initialization only once\nthis.eventBus.once<AppConfig>('app:initialized')\n  .subscribe(event => {\n    this.initializeComponent(event.payload);\n  });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"changing-strategies-dynamically",children:"Changing Strategies Dynamically"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// In a form component that needs debouncing for inputs\nexport class SearchFormComponent {\n  constructor(private eventBus: EventBusService) {\n    // Use debounce for form inputs\n    this.eventBus.setStrategy(StrategyType.DEBOUNCE);\n  }\n  \n  onInput(searchTerm: string) {\n    this.eventBus.emit<string>({\n      name: 'search:term:changed',\n      timestamp: Date.now(),\n      payload: searchTerm,\n      category: EventCategory.USER,\n      metadata: {\n        debounceDelay: 300 // Set custom debounce delay\n      }\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-priority",children:"Working with Priority"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Set up priority-based processing\neventBus.setPriorityMode(true);\n\n// Emit high-priority event\neventBus.emit<AlertMessage>({\n  name: 'system:alert',\n  timestamp: Date.now(),\n  payload: { message: 'Critical system error', level: 'error' },\n  category: EventCategory.SYSTEM,\n  priority: 10 // High priority\n});\n\n// Emit low-priority event\neventBus.emit<Notification>({\n  name: 'user:notification',\n  timestamp: Date.now(),\n  payload: { message: 'New message received' },\n  category: EventCategory.USER,\n  priority: 1 // Low priority\n});\n"})})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);