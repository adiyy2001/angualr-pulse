"use strict";(self.webpackChunkevent_bus_docs=self.webpackChunkevent_bus_docs||[]).push([[609],{8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}},9360:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/strategies/overview","title":"Strategies Overview","description":"The Event Bus Library implements the Strategy pattern to provide different behaviors for event propagation. Each strategy determines how events are routed to subscribers and has its own unique characteristics.","source":"@site/docs/api/strategies/overview.md","sourceDirName":"api/strategies","slug":"/api/strategies/overview","permalink":"/EDA-event-bus/docs/api/strategies/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/adiyy2001/EDA-event-bus/tree/main/projects/event-bus-docs/docs/api/strategies/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"EventBusService","permalink":"/EDA-event-bus/docs/api/event-bus-service"},"next":{"title":"Stateless Strategy","permalink":"/EDA-event-bus/docs/api/strategies/stateless"}}');var r=s(4848),i=s(8453);const a={sidebar_position:1},o="Strategies Overview",c={},d=[{value:"Strategy Types",id:"strategy-types",level:2},{value:"Using Strategies",id:"using-strategies",level:2},{value:"Setting the Strategy",id:"setting-the-strategy",level:3},{value:"Choosing the Right Strategy",id:"choosing-the-right-strategy",level:3},{value:"Strategy Interface",id:"strategy-interface",level:2},{value:"Creating Custom Strategies",id:"creating-custom-strategies",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"strategies-overview",children:"Strategies Overview"})}),"\n",(0,r.jsx)(t.p,{children:"The Event Bus Library implements the Strategy pattern to provide different behaviors for event propagation. Each strategy determines how events are routed to subscribers and has its own unique characteristics."}),"\n",(0,r.jsx)(t.h2,{id:"strategy-types",children:"Strategy Types"}),"\n",(0,r.jsx)(t.p,{children:"The library includes the following strategies:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Strategy"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./stateless",children:"Stateless"})}),(0,r.jsx)(t.td,{children:"Basic event propagation with no state maintained"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./stateful",children:"Stateful"})}),(0,r.jsx)(t.td,{children:"Maintains event history and can replay past events"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./broadcast",children:"Broadcast"})}),(0,r.jsx)(t.td,{children:"Sends events to all subscribers regardless of event type"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./multicast",children:"Multicast"})}),(0,r.jsx)(t.td,{children:"Sends events to all subscribers of the specific event type"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./unicast",children:"Unicast"})}),(0,r.jsx)(t.td,{children:"Sends events to a single subscriber (first, random, or round-robin)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./debounce",children:"Debounce"})}),(0,r.jsx)(t.td,{children:"Delays event processing and coalesces multiple events into one"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./throttle",children:"Throttle"})}),(0,r.jsx)(t.td,{children:"Limits the rate at which events are processed"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./delayed",children:"Delayed"})}),(0,r.jsx)(t.td,{children:"Delays the delivery of events by a specified time"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./persisted",children:"Persisted"})}),(0,r.jsx)(t.td,{children:"Stores events for resilience and later processing"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./pattern-matching",children:"Pattern Matching"})}),(0,r.jsx)(t.td,{children:"Routes events based on name pattern matching"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./priority",children:"Priority"})}),(0,r.jsx)(t.td,{children:"Processes events based on their priority level"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"./round-robin",children:"Round Robin"})}),(0,r.jsx)(t.td,{children:"Distributes events across subscribers in sequence"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"using-strategies",children:"Using Strategies"}),"\n",(0,r.jsx)(t.h3,{id:"setting-the-strategy",children:"Setting the Strategy"}),"\n",(0,r.jsxs)(t.p,{children:["You can set the strategy using the ",(0,r.jsx)(t.code,{children:"EventBusService"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { EventBusService, StrategyType } from '@yourdomain/event-bus-library';\n\n@Component({\n  selector: 'app-root',\n  template: '<div>Event Bus Demo</div>'\n})\nexport class AppComponent implements OnInit {\n  constructor(private eventBus: EventBusService) {}\n\n  ngOnInit() {\n    // Set the strategy at initialization\n    this.eventBus.setStrategy(StrategyType.MULTICAST);\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"choosing-the-right-strategy",children:"Choosing the Right Strategy"}),"\n",(0,r.jsx)(t.p,{children:"Here are some guidelines for choosing the appropriate strategy:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stateless Strategy"}),": Use for basic event propagation when you don't need event history"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stateful Strategy"}),": Use when you need to replay events for new subscribers"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Broadcast Strategy"}),": Use when all components need to be notified of all events"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Multicast Strategy"}),": Use for standard pub/sub behavior (most common)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Unicast Strategy"}),": Use when only one handler should process each event"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Debounce Strategy"}),": Use for high-frequency events where you only care about the final state"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Throttle Strategy"}),": Use to limit the processing rate of events"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Delayed Strategy"}),": Use when event processing should be deferred"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Persisted Strategy"}),": Use when events need to survive page refreshes or app restarts"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pattern Matching Strategy"}),": Use when event routing needs to be based on naming patterns"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Priority Strategy"}),": Use when some events need to be processed before others"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Round Robin Strategy"}),": Use to distribute event processing load across subscribers"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"strategy-interface",children:"Strategy Interface"}),"\n",(0,r.jsxs)(t.p,{children:["All strategies implement the ",(0,r.jsx)(t.code,{children:"EventBusStrategy"})," interface:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"export interface EventBusStrategy {\n  subscribe(eventType: string, listener: (event: BaseEvent) => void): void;\n  unsubscribe(eventType: string, listener: (event: BaseEvent) => void): void;\n  emit(eventType: string, event: BaseEvent): void;\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"creating-custom-strategies",children:"Creating Custom Strategies"}),"\n",(0,r.jsxs)(t.p,{children:["You can create custom strategies by implementing the ",(0,r.jsx)(t.code,{children:"EventBusStrategy"})," interface:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { EventBusStrategy } from '@yourdomain/event-bus-library';\nimport { BaseEvent } from '@yourdomain/event-bus-library';\n\nexport class CustomStrategy implements EventBusStrategy {\n  private subscribers: Map<string, Array<(event: BaseEvent) => void>> = new Map();\n\n  public subscribe(eventType: string, listener: (event: BaseEvent) => void): void {\n    if (!this.subscribers.has(eventType)) {\n      this.subscribers.set(eventType, []);\n    }\n    this.subscribers.get(eventType)!.push(listener);\n  }\n\n  public unsubscribe(eventType: string, listener: (event: BaseEvent) => void): void {\n    if (this.subscribers.has(eventType)) {\n      const listeners = this.subscribers.get(eventType)!;\n      const updated = listeners.filter(l => l !== listener);\n      this.subscribers.set(eventType, updated);\n    }\n  }\n\n  public emit(eventType: string, event: BaseEvent): void {\n    // Custom emit logic here\n    const listeners = this.subscribers.get(eventType);\n    if (listeners) {\n      // Implement your custom event propagation logic\n      listeners.forEach(listener => listener(event));\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"To use a custom strategy, you'll need to register it with Angular's dependency injection system:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { NgModule } from '@angular/core';\nimport { EventBusModule } from '@yourdomain/event-bus-library';\nimport { CustomStrategy } from './custom.strategy';\n\n@NgModule({\n  imports: [\n    EventBusModule\n  ],\n  providers: [\n    {\n      provide: 'CUSTOM_STRATEGY',\n      useClass: CustomStrategy\n    }\n  ]\n})\nexport class AppModule { }\n"})}),"\n",(0,r.jsx)(t.p,{children:"Then inject and use it:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Component, Inject, OnInit } from '@angular/core';\nimport { EventBusService } from '@yourdomain/event-bus-library';\n\n@Component({\n  selector: 'app-root',\n  template: '<div>Event Bus Demo</div>'\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    private eventBus: EventBusService,\n    @Inject('CUSTOM_STRATEGY') private customStrategy: any\n  ) {}\n\n  ngOnInit() {\n    // Set custom strategy\n    this.eventBus['strategy'] = this.customStrategy;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"In the next sections, we'll explore each strategy in detail."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);