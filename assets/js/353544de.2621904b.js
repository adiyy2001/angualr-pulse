"use strict";(self.webpackChunkevent_bus_docs=self.webpackChunkevent_bus_docs||[]).push([[982],{8345:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/examples/basic-usage","title":"Basic Usage Examples","description":"This section provides practical examples of how to use the Event Bus Library in common scenarios.","source":"@site/docs/api/examples/basic-usage.md","sourceDirName":"api/examples","slug":"/api/examples/basic-usage","permalink":"/EDA-event-bus/docs/api/examples/basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/adiyy2001/EDA-event-bus/tree/main/projects/event-bus-docs/docs/api/examples/basic-usage.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Logging Middleware","permalink":"/EDA-event-bus/docs/api/middleware/logging"},"next":{"title":"Installation and Project Structure","permalink":"/EDA-event-bus/docs/installation-and-project-structure"}}');var i=r(4848),o=r(8453);const s={sidebar_position:1},a="Basic Usage Examples",l={},c=[{value:"Simple Communication Between Components",id:"simple-communication-between-components",level:2},{value:"Sender Component",id:"sender-component",level:3},{value:"Receiver Component",id:"receiver-component",level:3},{value:"Form Validation with Debounce Strategy",id:"form-validation-with-debounce-strategy",level:2},{value:"Global Error Handling",id:"global-error-handling",level:2}];function m(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"basic-usage-examples",children:"Basic Usage Examples"})}),"\n",(0,i.jsx)(e.p,{children:"This section provides practical examples of how to use the Event Bus Library in common scenarios."}),"\n",(0,i.jsx)(e.h2,{id:"simple-communication-between-components",children:"Simple Communication Between Components"}),"\n",(0,i.jsx)(e.h3,{id:"sender-component",children:"Sender Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { Component } from '@angular/core';\nimport { EventBusService, BaseEvent, EventCategory } from '@yourdomain/event-bus-library';\n\n// Define the event payload type\ninterface NotificationPayload {\n  message: string;\n  type: 'info' | 'warning' | 'error';\n  timestamp: number;\n}\n\n@Component({\n  selector: 'app-notification-sender',\n  template: `\n    <div>\n      <input type=\"text\" [(ngModel)]=\"message\" placeholder=\"Notification message\">\n      <select [(ngModel)]=\"type\">\n        <option value=\"info\">Info</option>\n        <option value=\"warning\">Warning</option>\n        <option value=\"error\">Error</option>\n      </select>\n      <button (click)=\"sendNotification()\">Send Notification</button>\n    </div>\n  `\n})\nexport class NotificationSenderComponent {\n  message = '';\n  type: 'info' | 'warning' | 'error' = 'info';\n\n  constructor(private eventBus: EventBusService) {}\n\n  sendNotification() {\n    if (!this.message) return;\n\n    const notification: NotificationPayload = {\n      message: this.message,\n      type: this.type,\n      timestamp: Date.now()\n    };\n\n    this.eventBus.emit<NotificationPayload>({\n      name: 'notification:new',\n      timestamp: Date.now(),\n      payload: notification,\n      category: EventCategory.USER\n    });\n\n    // Reset the form\n    this.message = '';\n    this.type = 'info';\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"receiver-component",children:"Receiver Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { EventBusService, BaseEvent } from '@yourdomain/event-bus-library';\nimport { Subscription } from 'rxjs';\n\n// Use the same interface as the sender\ninterface NotificationPayload {\n  message: string;\n  type: 'info' | 'warning' | 'error';\n  timestamp: number;\n}\n\n@Component({\n  selector: 'app-notification-list',\n  template: `\n    <div class=\"notifications\">\n      <div *ngFor=\"let notification of notifications\" \n           class=\"notification\"\n           [ngClass]=\"notification.type\">\n        <span class=\"message\">{{ notification.message }}</span>\n        <span class=\"time\">{{ notification.timestamp | date:'short' }}</span>\n      </div>\n      <div *ngIf=\"notifications.length === 0\">No notifications</div>\n    </div>\n  `,\n  styles: [`\n    .notification { padding: 10px; margin-bottom: 5px; border-radius: 4px; }\n    .info { background-color: #e3f2fd; }\n    .warning { background-color: #fff3e0; }\n    .error { background-color: #ffebee; }\n    .time { font-size: 0.8em; color: #777; margin-left: 10px; }\n  `]\n})\nexport class NotificationListComponent implements OnInit, OnDestroy {\n  notifications: NotificationPayload[] = [];\n  private subscription: Subscription;\n\n  constructor(private eventBus: EventBusService) {}\n\n  ngOnInit() {\n    this.subscription = this.eventBus.on<NotificationPayload>('notification:new')\n      .subscribe((event: BaseEvent<NotificationPayload>) => {\n        this.notifications.unshift(event.payload);\n        \n        // Limit the number of displayed notifications\n        if (this.notifications.length > 5) {\n          this.notifications = this.notifications.slice(0, 5);\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"form-validation-with-debounce-strategy",children:"Form Validation with Debounce Strategy"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { EventBusService, StrategyType, BaseEvent, EventCategory } from '@yourdomain/event-bus-library';\n\ninterface ValidationResult {\n  field: string;\n  valid: boolean;\n  errors?: string[];\n}\n\n@Component({\n  selector: 'app-signup-form',\n  template: `\n    <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input id=\"username\" type=\"text\" formControlName=\"username\">\n        <div class=\"error\" *ngIf=\"usernameErrors.length\">\n          <p *ngFor=\"let error of usernameErrors\">{{ error }}</p>\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input id=\"email\" type=\"email\" formControlName=\"email\">\n        <div class=\"error\" *ngIf=\"emailErrors.length\">\n          <p *ngFor=\"let error of emailErrors\">{{ error }}</p>\n        </div>\n      </div>\n      \n      <button type=\"submit\" [disabled]=\"!signupForm.valid\">Sign Up</button>\n    </form>\n  `\n})\nexport class SignupFormComponent implements OnInit {\n  signupForm: FormGroup;\n  usernameErrors: string[] = [];\n  emailErrors: string[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private eventBus: EventBusService\n  ) {\n    this.signupForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4)]],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  ngOnInit() {\n    // Set debounce strategy for form input validation\n    this.eventBus.setStrategy(StrategyType.DEBOUNCE);\n    \n    // Subscribe to validation results\n    this.eventBus.on<ValidationResult>('form:validation:result').subscribe(\n      (event: BaseEvent<ValidationResult>) => {\n        const result = event.payload;\n        \n        if (result.field === 'username') {\n          this.usernameErrors = result.errors || [];\n        } else if (result.field === 'email') {\n          this.emailErrors = result.errors || [];\n        }\n      }\n    );\n    \n    // Set up form value change listeners\n    this.signupForm.get('username')?.valueChanges.subscribe(value => {\n      this.validateField('username', value);\n    });\n    \n    this.signupForm.get('email')?.valueChanges.subscribe(value => {\n      this.validateField('email', value);\n    });\n  }\n  \n  validateField(field: string, value: string) {\n    // Emit validation event with debounce\n    this.eventBus.emit<{field: string, value: string}>({\n      name: 'form:field:changed',\n      timestamp: Date.now(),\n      payload: { field, value },\n      category: EventCategory.USER,\n      metadata: {\n        debounceDelay: 300\n      }\n    });\n    \n    // In a real app, you might have a validator service listening to 'form:field:changed'\n    // events and emitting 'form:validation:result' events after validation\n    \n    // For this example, we'll simulate the validation directly\n    setTimeout(() => {\n      let errors: string[] = [];\n      \n      if (field === 'username') {\n        if (!value) {\n          errors.push('Username is required');\n        } else if (value.length < 4) {\n          errors.push('Username must be at least 4 characters');\n        }\n        // Simulate async validation (e.g., checking if username is taken)\n        if (value === 'admin') {\n          errors.push('Username already taken');\n        }\n      } else if (field === 'email') {\n        if (!value) {\n          errors.push('Email is required');\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n          errors.push('Invalid email format');\n        }\n      }\n      \n      this.eventBus.emit<ValidationResult>({\n        name: 'form:validation:result',\n        timestamp: Date.now(),\n        payload: {\n          field,\n          valid: errors.length === 0,\n          errors\n        },\n        category: EventCategory.SYSTEM\n      });\n    }, 200); // Simulate server delay\n  }\n  \n  onSubmit() {\n    if (this.signupForm.valid) {\n      console.log('Form submitted:', this.signupForm.value);\n      // Process form submission...\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"global-error-handling",children:"Global Error Handling"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { EventBusService, BaseEvent, EventCategory } from '@yourdomain/event-bus-library';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nexport interface ErrorEvent {\n  message: string;\n  code?: string | number;\n  details?: any;\n  source?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalErrorService {\n  constructor(private eventBus: EventBusService) {}\n\n  handleError(error: Error | HttpErrorResponse, source: string = 'unknown') {\n    console.error('Error occurred:', error);\n    \n    let errorEvent: ErrorEvent = {\n      message: 'An unexpected error occurred',\n      source: source\n    };\n    \n    if (error instanceof HttpErrorResponse) {\n      errorEvent = {\n        message: error.statusText || 'HTTP error occurred',\n        code: error.status,\n        details: error.error,\n        source: `${source} (HTTP)`\n      };\n    } else if (error instanceof Error) {\n      errorEvent = {\n        message: error.message || 'Error occurred',\n        details: error.stack,\n        source: source\n      };\n    }\n    \n    // Emit the error event\n    this.eventBus.emit<ErrorEvent>({\n      name: 'error:occurred',\n      timestamp: Date.now(),\n      payload: errorEvent,\n      category: EventCategory.SYSTEM,\n      metadata: {\n        severity: errorEvent.code >= 500 ? 'critical' : 'normal'\n      }\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { Component, OnInit } from \'@angular/core\';\nimport { EventBusService, BaseEvent } from \'@yourdomain/event-bus-library\';\n\ninterface ErrorEvent {\n  message: string;\n  code?: string | number;\n  details?: any;\n  source?: string;\n}\n\n@Component({\n  selector: \'app-error-toast\',\n  template: `\n    <div *ngIf="isVisible" class="error-toast" [ngClass]="severity">\n      <div class="error-message">{{ currentError?.message }}</div>\n      <div class="error-source" *ngIf="currentError?.source">\n        Source: {{ currentError.source }}\n      </div>\n      <button class="close-btn" (click)="hideError()">\xd7</button>\n    </div>\n  `,\n  styles: [`\n    .error-toast {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      padding: 15px;\n      background-color: #f8d7da;\n      border: 1px solid #f5c6cb;\n      border-radius: 4px;\n      z-index: 9999;\n      max-width: 350px;\n    }\n    .critical {\n      background-color: #dc3545;\n      color: white;\n    }\n    .error-source {\n      font-size: 0.8em;\n      margin-top: 8px;\n    }\n    .close-btn {\n      position: absolute;\n      top: 5px;\n      right: 5px;\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n    }\n  `]\n})\nexport class ErrorToastComponent implements OnInit {\n  isVisible = false;\n  currentError: ErrorEvent | null = null;\n  severity = \'normal\';\n  private timeout: any;\n\n  constructor(private eventBus: EventBusService) {}\n\n  ngOnInit() {\n    this.eventBus.on<ErrorEvent>(\'error:occurred\').subscribe(\n      (event: BaseEvent<ErrorEvent>) => {\n        this.showError(event.payload, event.metadata?.severity || \'normal\');\n      }\n    );\n  }\n\n  showError(error: ErrorEvent, severity: string) {\n    // Clear any existing timeout\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    \n    this.currentError = error;\n    this.severity = severity;\n    this.isVisible = true;\n    \n    // Auto-hide after 5 seconds\n    this.timeout = setTimeout(() => {\n      this.hideError();\n    }, 5000);\n  }\n\n  hideError() {\n    this.isVisible = false;\n  }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"These examples demonstrate some common usage patterns for the Event Bus Library. You can adapt them to your specific application needs."})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);